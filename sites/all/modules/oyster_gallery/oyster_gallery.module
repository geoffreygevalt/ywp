<?php

/**
 * @file
 * Include additional module files.
 */
require_once dirname(__FILE__) . '/inc/oyster_gallery_block.inc';

/**
 * Implements hook_init().
 */
function oyster_gallery_init() {
	drupal_add_js(drupal_get_path('module', 'oyster_gallery') .'/js/oyster_flow.js', array('scope' => 'footer'));
}

/**
 * Implements hook_entity_info().
 */
function oyster_gallery_entity_info() {
  $info = array();

  $info['oyster_gallery'] = array(
    'label' => t('Oyster Gallery'),
    'base table' => 'oyster_gallery',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'module' => 'oyster_gallery',
    'access callback' => 'oyster_gallery_access_callback',
		'uri callback' => 'entity_class_uri',
		'admin ui' => array(
		  'path' => 'admin/structure/oyster-gallery',
		  'controller class' => 'OysterGalleryUIController',
		),
		'fieldable' => TRUE,
  );

  return $info;
}

/**
 * Oyster Gallery UI Controller extending the Entity Default UI Controller class.
 */
class OysterGalleryUIController extends EntityDefaultUIController{
  
  /**
   * Provides definitions for implementing hook_menu().
   */
  public function hook_menu() {
    $items = array();
    $id_count = count(explode('/', $this->path));
    $wildcard = isset($this->entityInfo['admin ui']['menu wildcard']) ? $this->entityInfo['admin ui']['menu wildcard'] : '%entity_object';
    $plural_label = isset($this->entityInfo['plural label']) ? $this->entityInfo['plural label'] : 'Oyster Galleries';

    $items[$this->path] = array(
      'title' => $plural_label, 
      'page callback' => 'drupal_get_form', 
      'page arguments' => array($this->entityType . '_overview_form', $this->entityType), 
      'description' => 'Manage ' . $plural_label . '.', 
      'access callback' => 'entity_access', 
      'access arguments' => array('view', $this->entityType), 
      'file' => 'includes/entity.ui.inc',
    );
    $items[$this->path . '/list'] = array(
      'title' => 'List', 
      'type' => MENU_DEFAULT_LOCAL_TASK, 
      'weight' => -10,
    );
    $items[$this->path . '/add'] = array(
      'title callback' => 'entity_ui_get_action_title', 
      'title arguments' => array('add', $this->entityType), 
      'page callback' => 'entity_ui_get_form', 
      'page arguments' => array($this->entityType, NULL, 'add'), 
      'access callback' => 'entity_access', 
      'access arguments' => array('create', $this->entityType), 
      'type' => MENU_LOCAL_ACTION,
    );
    $items[$this->path . '/manage/' . $wildcard] = array(
      'title' => 'Edit', 
      'title callback' => 'entity_label', 
      'title arguments' => array($this->entityType, $id_count + 1), 
      'page callback' => 'entity_ui_get_form', 
      'page arguments' => array($this->entityType, $id_count + 1), 
      'load arguments' => array($this->entityType), 
      'access callback' => 'entity_access', 
      'access arguments' => array('update', $this->entityType, $id_count + 1),
    );
    $items[$this->path . '/manage/' . $wildcard . '/edit'] = array(
      'title' => 'Edit', 
      'load arguments' => array($this->entityType), 
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );

    // Clone form, a special case for the edit form.
    $items[$this->path . '/manage/' . $wildcard . '/clone'] = array(
      'title' => 'Clone', 
      'page callback' => 'entity_ui_get_form', 
      'page arguments' => array($this->entityType, $id_count + 1, 'clone'), 
      'load arguments' => array($this->entityType), 
      'access callback' => 'entity_access', 
      'access arguments' => array('create', $this->entityType),
    );
    // Menu item for operations like revert and delete.
    $items[$this->path . '/manage/' . $wildcard . '/%'] = array(
      'page callback' => 'drupal_get_form', 
      'page arguments' => array($this->entityType . '_operation_form', $this->entityType, $id_count + 1, $id_count + 2), 
      'load arguments' => array($this->entityType), 
      'access callback' => 'entity_access', 
      'access arguments' => array('delete', $this->entityType, $id_count + 1), 
      'file' => 'includes/entity.ui.inc',
    );

    if (!empty($this->entityInfo['exportable'])) {
      // Menu item for importing an entity.
      $items[$this->path . '/import'] = array(
        'title callback' => 'entity_ui_get_action_title', 
        'title arguments' => array('import', $this->entityType), 
        'page callback' => 'drupal_get_form', 
        'page arguments' => array($this->entityType . '_operation_form', $this->entityType, NULL, 'import'), 
        'access callback' => 'entity_access', 
        'access arguments' => array('create', $this->entityType), 
        'file' => 'includes/entity.ui.inc', 
        'type' => MENU_LOCAL_ACTION,
      );
    }

    if (!empty($this->entityInfo['admin ui']['file'])) {
      // Add in the include file for the entity form.
      foreach (array("/manage/$wildcard", "/manage/$wildcard/clone", '/add') as $path_end) {
        $items[$this->path . $path_end]['file'] = $this->entityInfo['admin ui']['file'];
        $items[$this->path . $path_end]['file path'] = isset($this->entityInfo['admin ui']['file path']) ? $this->entityInfo['admin ui']['file path'] : drupal_get_path('module', $this->entityInfo['module']);
      }
    }
    return $items;
  }


  protected function overviewTableRow($conditions, $id, $entity, $additional_cols = array()) {
    // Set URI to null
    $entity_uri = NULL;
    
    $row[] = array(
      'data' => array(
        '#theme' => 'entity_ui_overview_item', 
        '#label' => entity_label($this->entityType, $entity), 
        '#name' => !empty($this->entityInfo['exportable']) ? entity_id($this->entityType, $entity) : FALSE, 
        '#url' => $entity_uri ? $entity_uri : FALSE, 
        '#entity_type' => $this->entityType,
      ),
    );

    // Add in any passed additional cols.
    foreach ($additional_cols as $col) {
      $row[] = $col;
    }

    // Add a row for the exportable status.
    if (!empty($this->entityInfo['exportable'])) {
      $row[] = array('data' => array(
          '#theme' => 'entity_status', 
          '#status' => $entity->{$this->statusKey},
        ));
    }
    // In case this is a bundle, we add links to the field ui tabs.
    $field_ui = !empty($this->entityInfo['bundle of']) && entity_type_is_fieldable($this->entityInfo['bundle of']) && module_exists('field_ui');
    // For exportable entities we add an export link.
    $exportable = !empty($this->entityInfo['exportable']);
    // If i18n integration is enabled, add a link to the translate tab.
    $i18n = !empty($this->entityInfo['i18n controller class']);

    // Add operations depending on the status.
    if (entity_has_status($this->entityType, $entity, ENTITY_FIXED)) {
      $row[] = array(
        'data' => l(t('clone'), $this->path . '/manage/' . $id . '/clone'),
        'colspan' => $this->operationCount(),
      );
    }
    else {
      $row[] = l(t('edit'), $this->path . '/manage/' . $id);

      if ($field_ui) {
        $row[] = l(t('manage fields'), $this->path . '/manage/' . $id . '/fields');
        $row[] = l(t('manage display'), $this->path . '/manage/' . $id . '/display');
      }
      if ($i18n) {
        $row[] = l(t('translate'), $this->path . '/manage/' . $id . '/translate');
      }
      if ($exportable) {
        $row[] = l(t('clone'), $this->path . '/manage/' . $id . '/clone');
      }

      if (empty($this->entityInfo['exportable']) || !entity_has_status($this->entityType, $entity, ENTITY_IN_CODE)) {
        $row[] = l(t('delete'), $this->path . '/manage/' . $id . '/delete', array('query' => drupal_get_destination()));
      }
      elseif (entity_has_status($this->entityType, $entity, ENTITY_OVERRIDDEN)) {
        $row[] = l(t('revert'), $this->path . '/manage/' . $id . '/revert', array('query' => drupal_get_destination()));
      }
      else {
        $row[] = '';
      }
    }
    if ($exportable) {
      $row[] = l(t('export'), $this->path . '/manage/' . $id . '/export');
    }
    return $row;
  
  }

}

/**
 * Access callback for project entities.
 */
function oyster_gallery_access_callback($op, $gallery = NULL, $account = NULL) {
  if (user_is_anonymous() || !user_access('administer oyster_gallery')) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Form definition for adding / editing a project.
 */
function oyster_gallery_form($form, &$form_state, $gallery = NULL) {

  $form['name'] = array(
    '#title' => t('Gallery name'),
    '#type' => 'textfield',
    '#default_value' => isset($gallery->name) ? $gallery->name : '',
    '#required' => TRUE,
    '#weight' => -1,
  );
  
  field_attach_form('oyster_gallery', $gallery, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => isset($gallery->id) ? t('Update Gallery') : t('Save Gallery'),
    '#weight' => 50,
  );

  return $form;
}

/**
 * Submit handler for the project add/edit form.
 */
function oyster_gallery_form_submit($form, &$form_state) {
  $gallery = entity_ui_form_submit_build_entity($form, $form_state);
  $gallery->save();
  drupal_set_message(t('The gallery: @name has been saved.', array('@name' => $gallery->name)));
  $form_state['redirect'] = 'admin/structure/oyster-gallery';
}

/**
 * Implements hook_permission.
 */
function oyster_gallery_permission() {
	return array(
	  'administer oyster_gallery' => array(
	    'title' => t('Administer Oyster Gallery'),
	    'description' => t('Set permissions for use of the Oyster Gallery module'),
	  ),
	);
} 